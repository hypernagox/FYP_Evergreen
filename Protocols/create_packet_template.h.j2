#pragma once
{% if namespace_prefix == 'ServerCore::' %}
#include "../ServerCore/ServerCorePch.h"
{% else %}
#include "../ClientNetwork/ClientNetHelper.h"
{% endif %}
#include "enum_generated.h"
#include "struct_generated.h"
#include "protocol_generated.h"

{% if namespace_prefix == 'ServerCore::' %}
template<typename T>
using Vector = ServerCore::XVector<T>;
{% else %}
template<typename T>
using Vector = std::vector<T>;
{% endif %}

extern flatbuffers::FlatBufferBuilder* const CreateBuilder() noexcept;

static inline flatbuffers::FlatBufferBuilder* const GetBuilder() noexcept { return CreateBuilder(); }

{% for table in tables %}
{{ namespace_prefix }}S_ptr<{{ namespace_prefix }}SendBuffer> Create_{{ table.name }}(
    {% if table.fields|length > 0 %}
    {% for field in table.fields %}
    {% if "::" in field.type %}
    const {{ field.type }}& {{ field.name }},
    {% else %}
    const {{ field.type }} {{ field.name }},
    {% endif %}
    {% endfor %}
    flatbuffers::FlatBufferBuilder* const builder_ptr = GetBuilder()
    {% else %}
    flatbuffers::FlatBufferBuilder* const builder_ptr = GetBuilder()
    {% endif %}
)noexcept;
{% endfor %}