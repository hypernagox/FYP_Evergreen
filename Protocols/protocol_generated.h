// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROTOCOL_NAGOX_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_PROTOCOL_NAGOX_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "enum_generated.h"
#include "struct_generated.h"

namespace Nagox {
namespace Protocol {

struct c2s_LOGIN;
struct c2s_LOGINBuilder;

struct s2c_LOGIN;
struct s2c_LOGINBuilder;

struct c2s_PING_PONG;
struct c2s_PING_PONGBuilder;

struct s2c_PING_PONG;
struct s2c_PING_PONGBuilder;

struct c2s_ENTER;
struct c2s_ENTERBuilder;

struct s2c_APPEAR_OBJECT;
struct s2c_APPEAR_OBJECTBuilder;

struct s2c_REMOVE_OBJECT;
struct s2c_REMOVE_OBJECTBuilder;

struct c2s_MOVE;
struct c2s_MOVEBuilder;

struct s2c_MOVE;
struct s2c_MOVEBuilder;

struct s2c_MONSTER_ATTACK;
struct s2c_MONSTER_ATTACKBuilder;

struct s2c_MONSTER_AGGRO_START;
struct s2c_MONSTER_AGGRO_STARTBuilder;

struct s2c_MONSTER_AGGRO_END;
struct s2c_MONSTER_AGGRO_ENDBuilder;

struct c2s_PLAYER_ATTACK;
struct c2s_PLAYER_ATTACKBuilder;

struct s2c_PLAYER_ATTACK;
struct s2c_PLAYER_ATTACKBuilder;

struct s2c_PLAYER_DEATH;
struct s2c_PLAYER_DEATHBuilder;

struct c2s_PLAYER_DEATH;
struct c2s_PLAYER_DEATHBuilder;

struct c2s_REQUEST_QUEST;
struct c2s_REQUEST_QUESTBuilder;

struct s2c_REQUEST_QUEST;
struct s2c_REQUEST_QUESTBuilder;

struct s2c_CLEAR_QUEST;
struct s2c_CLEAR_QUESTBuilder;

struct c2s_FIRE_PROJ;
struct c2s_FIRE_PROJBuilder;

struct s2c_FIRE_PROJ;
struct s2c_FIRE_PROJBuilder;

struct c2s_LOGIN FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef c2s_LOGINBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  ::flatbuffers::String *mutable_name() {
    return GetPointer<::flatbuffers::String *>(VT_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct c2s_LOGINBuilder {
  typedef c2s_LOGIN Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(c2s_LOGIN::VT_NAME, name);
  }
  explicit c2s_LOGINBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<c2s_LOGIN> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<c2s_LOGIN>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<c2s_LOGIN> Createc2s_LOGIN(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0) {
  c2s_LOGINBuilder builder_(_fbb);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<c2s_LOGIN> Createc2s_LOGINDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return Nagox::Protocol::Createc2s_LOGIN(
      _fbb,
      name__);
}

struct s2c_LOGIN FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef s2c_LOGINBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJ_ID = 4,
    VT_SERVER_TIME_STAMP = 6
  };
  uint32_t obj_id() const {
    return GetField<uint32_t>(VT_OBJ_ID, 0);
  }
  bool mutate_obj_id(uint32_t _obj_id = 0) {
    return SetField<uint32_t>(VT_OBJ_ID, _obj_id, 0);
  }
  uint64_t server_time_stamp() const {
    return GetField<uint64_t>(VT_SERVER_TIME_STAMP, 0);
  }
  bool mutate_server_time_stamp(uint64_t _server_time_stamp = 0) {
    return SetField<uint64_t>(VT_SERVER_TIME_STAMP, _server_time_stamp, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_OBJ_ID, 4) &&
           VerifyField<uint64_t>(verifier, VT_SERVER_TIME_STAMP, 8) &&
           verifier.EndTable();
  }
};

struct s2c_LOGINBuilder {
  typedef s2c_LOGIN Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_obj_id(uint32_t obj_id) {
    fbb_.AddElement<uint32_t>(s2c_LOGIN::VT_OBJ_ID, obj_id, 0);
  }
  void add_server_time_stamp(uint64_t server_time_stamp) {
    fbb_.AddElement<uint64_t>(s2c_LOGIN::VT_SERVER_TIME_STAMP, server_time_stamp, 0);
  }
  explicit s2c_LOGINBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<s2c_LOGIN> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<s2c_LOGIN>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<s2c_LOGIN> Creates2c_LOGIN(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t obj_id = 0,
    uint64_t server_time_stamp = 0) {
  s2c_LOGINBuilder builder_(_fbb);
  builder_.add_server_time_stamp(server_time_stamp);
  builder_.add_obj_id(obj_id);
  return builder_.Finish();
}

struct c2s_PING_PONG FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef c2s_PING_PONGBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct c2s_PING_PONGBuilder {
  typedef c2s_PING_PONG Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit c2s_PING_PONGBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<c2s_PING_PONG> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<c2s_PING_PONG>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<c2s_PING_PONG> Createc2s_PING_PONG(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  c2s_PING_PONGBuilder builder_(_fbb);
  return builder_.Finish();
}

struct s2c_PING_PONG FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef s2c_PING_PONGBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SERVER_TIME_STAMP = 4
  };
  uint64_t server_time_stamp() const {
    return GetField<uint64_t>(VT_SERVER_TIME_STAMP, 0);
  }
  bool mutate_server_time_stamp(uint64_t _server_time_stamp = 0) {
    return SetField<uint64_t>(VT_SERVER_TIME_STAMP, _server_time_stamp, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_SERVER_TIME_STAMP, 8) &&
           verifier.EndTable();
  }
};

struct s2c_PING_PONGBuilder {
  typedef s2c_PING_PONG Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_server_time_stamp(uint64_t server_time_stamp) {
    fbb_.AddElement<uint64_t>(s2c_PING_PONG::VT_SERVER_TIME_STAMP, server_time_stamp, 0);
  }
  explicit s2c_PING_PONGBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<s2c_PING_PONG> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<s2c_PING_PONG>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<s2c_PING_PONG> Creates2c_PING_PONG(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t server_time_stamp = 0) {
  s2c_PING_PONGBuilder builder_(_fbb);
  builder_.add_server_time_stamp(server_time_stamp);
  return builder_.Finish();
}

struct c2s_ENTER FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef c2s_ENTERBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POS = 4
  };
  const Nagox::Struct::Vec3 *pos() const {
    return GetStruct<const Nagox::Struct::Vec3 *>(VT_POS);
  }
  Nagox::Struct::Vec3 *mutable_pos() {
    return GetStruct<Nagox::Struct::Vec3 *>(VT_POS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Nagox::Struct::Vec3>(verifier, VT_POS, 4) &&
           verifier.EndTable();
  }
};

struct c2s_ENTERBuilder {
  typedef c2s_ENTER Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pos(const Nagox::Struct::Vec3 *pos) {
    fbb_.AddStruct(c2s_ENTER::VT_POS, pos);
  }
  explicit c2s_ENTERBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<c2s_ENTER> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<c2s_ENTER>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<c2s_ENTER> Createc2s_ENTER(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const Nagox::Struct::Vec3 *pos = nullptr) {
  c2s_ENTERBuilder builder_(_fbb);
  builder_.add_pos(pos);
  return builder_.Finish();
}

struct s2c_APPEAR_OBJECT FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef s2c_APPEAR_OBJECTBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJ_ID = 4,
    VT_GROUP_TYPE = 6,
    VT_OBJ_TYPE_INFO = 8,
    VT_APPEAR_POS = 10
  };
  uint32_t obj_id() const {
    return GetField<uint32_t>(VT_OBJ_ID, 0);
  }
  bool mutate_obj_id(uint32_t _obj_id = 0) {
    return SetField<uint32_t>(VT_OBJ_ID, _obj_id, 0);
  }
  Nagox::Enum::GROUP_TYPE group_type() const {
    return static_cast<Nagox::Enum::GROUP_TYPE>(GetField<uint8_t>(VT_GROUP_TYPE, 0));
  }
  bool mutate_group_type(Nagox::Enum::GROUP_TYPE _group_type = static_cast<Nagox::Enum::GROUP_TYPE>(0)) {
    return SetField<uint8_t>(VT_GROUP_TYPE, static_cast<uint8_t>(_group_type), 0);
  }
  uint8_t obj_type_info() const {
    return GetField<uint8_t>(VT_OBJ_TYPE_INFO, 0);
  }
  bool mutate_obj_type_info(uint8_t _obj_type_info = 0) {
    return SetField<uint8_t>(VT_OBJ_TYPE_INFO, _obj_type_info, 0);
  }
  const Nagox::Struct::Vec3 *appear_pos() const {
    return GetStruct<const Nagox::Struct::Vec3 *>(VT_APPEAR_POS);
  }
  Nagox::Struct::Vec3 *mutable_appear_pos() {
    return GetStruct<Nagox::Struct::Vec3 *>(VT_APPEAR_POS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_OBJ_ID, 4) &&
           VerifyField<uint8_t>(verifier, VT_GROUP_TYPE, 1) &&
           VerifyField<uint8_t>(verifier, VT_OBJ_TYPE_INFO, 1) &&
           VerifyField<Nagox::Struct::Vec3>(verifier, VT_APPEAR_POS, 4) &&
           verifier.EndTable();
  }
};

struct s2c_APPEAR_OBJECTBuilder {
  typedef s2c_APPEAR_OBJECT Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_obj_id(uint32_t obj_id) {
    fbb_.AddElement<uint32_t>(s2c_APPEAR_OBJECT::VT_OBJ_ID, obj_id, 0);
  }
  void add_group_type(Nagox::Enum::GROUP_TYPE group_type) {
    fbb_.AddElement<uint8_t>(s2c_APPEAR_OBJECT::VT_GROUP_TYPE, static_cast<uint8_t>(group_type), 0);
  }
  void add_obj_type_info(uint8_t obj_type_info) {
    fbb_.AddElement<uint8_t>(s2c_APPEAR_OBJECT::VT_OBJ_TYPE_INFO, obj_type_info, 0);
  }
  void add_appear_pos(const Nagox::Struct::Vec3 *appear_pos) {
    fbb_.AddStruct(s2c_APPEAR_OBJECT::VT_APPEAR_POS, appear_pos);
  }
  explicit s2c_APPEAR_OBJECTBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<s2c_APPEAR_OBJECT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<s2c_APPEAR_OBJECT>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<s2c_APPEAR_OBJECT> Creates2c_APPEAR_OBJECT(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t obj_id = 0,
    Nagox::Enum::GROUP_TYPE group_type = Nagox::Enum::GROUP_TYPE_PLAYER,
    uint8_t obj_type_info = 0,
    const Nagox::Struct::Vec3 *appear_pos = nullptr) {
  s2c_APPEAR_OBJECTBuilder builder_(_fbb);
  builder_.add_appear_pos(appear_pos);
  builder_.add_obj_id(obj_id);
  builder_.add_obj_type_info(obj_type_info);
  builder_.add_group_type(group_type);
  return builder_.Finish();
}

struct s2c_REMOVE_OBJECT FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef s2c_REMOVE_OBJECTBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJ_ID = 4
  };
  uint32_t obj_id() const {
    return GetField<uint32_t>(VT_OBJ_ID, 0);
  }
  bool mutate_obj_id(uint32_t _obj_id = 0) {
    return SetField<uint32_t>(VT_OBJ_ID, _obj_id, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_OBJ_ID, 4) &&
           verifier.EndTable();
  }
};

struct s2c_REMOVE_OBJECTBuilder {
  typedef s2c_REMOVE_OBJECT Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_obj_id(uint32_t obj_id) {
    fbb_.AddElement<uint32_t>(s2c_REMOVE_OBJECT::VT_OBJ_ID, obj_id, 0);
  }
  explicit s2c_REMOVE_OBJECTBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<s2c_REMOVE_OBJECT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<s2c_REMOVE_OBJECT>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<s2c_REMOVE_OBJECT> Creates2c_REMOVE_OBJECT(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t obj_id = 0) {
  s2c_REMOVE_OBJECTBuilder builder_(_fbb);
  builder_.add_obj_id(obj_id);
  return builder_.Finish();
}

struct c2s_MOVE FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef c2s_MOVEBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POS = 4,
    VT_VEL = 6,
    VT_ACCEL = 8,
    VT_BODY_ANGLE = 10,
    VT_TIME_STAMP = 12
  };
  const Nagox::Struct::Vec3 *pos() const {
    return GetStruct<const Nagox::Struct::Vec3 *>(VT_POS);
  }
  Nagox::Struct::Vec3 *mutable_pos() {
    return GetStruct<Nagox::Struct::Vec3 *>(VT_POS);
  }
  const Nagox::Struct::Vec3 *vel() const {
    return GetStruct<const Nagox::Struct::Vec3 *>(VT_VEL);
  }
  Nagox::Struct::Vec3 *mutable_vel() {
    return GetStruct<Nagox::Struct::Vec3 *>(VT_VEL);
  }
  const Nagox::Struct::Vec3 *accel() const {
    return GetStruct<const Nagox::Struct::Vec3 *>(VT_ACCEL);
  }
  Nagox::Struct::Vec3 *mutable_accel() {
    return GetStruct<Nagox::Struct::Vec3 *>(VT_ACCEL);
  }
  float body_angle() const {
    return GetField<float>(VT_BODY_ANGLE, 0.0f);
  }
  bool mutate_body_angle(float _body_angle = 0.0f) {
    return SetField<float>(VT_BODY_ANGLE, _body_angle, 0.0f);
  }
  uint64_t time_stamp() const {
    return GetField<uint64_t>(VT_TIME_STAMP, 0);
  }
  bool mutate_time_stamp(uint64_t _time_stamp = 0) {
    return SetField<uint64_t>(VT_TIME_STAMP, _time_stamp, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Nagox::Struct::Vec3>(verifier, VT_POS, 4) &&
           VerifyField<Nagox::Struct::Vec3>(verifier, VT_VEL, 4) &&
           VerifyField<Nagox::Struct::Vec3>(verifier, VT_ACCEL, 4) &&
           VerifyField<float>(verifier, VT_BODY_ANGLE, 4) &&
           VerifyField<uint64_t>(verifier, VT_TIME_STAMP, 8) &&
           verifier.EndTable();
  }
};

struct c2s_MOVEBuilder {
  typedef c2s_MOVE Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pos(const Nagox::Struct::Vec3 *pos) {
    fbb_.AddStruct(c2s_MOVE::VT_POS, pos);
  }
  void add_vel(const Nagox::Struct::Vec3 *vel) {
    fbb_.AddStruct(c2s_MOVE::VT_VEL, vel);
  }
  void add_accel(const Nagox::Struct::Vec3 *accel) {
    fbb_.AddStruct(c2s_MOVE::VT_ACCEL, accel);
  }
  void add_body_angle(float body_angle) {
    fbb_.AddElement<float>(c2s_MOVE::VT_BODY_ANGLE, body_angle, 0.0f);
  }
  void add_time_stamp(uint64_t time_stamp) {
    fbb_.AddElement<uint64_t>(c2s_MOVE::VT_TIME_STAMP, time_stamp, 0);
  }
  explicit c2s_MOVEBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<c2s_MOVE> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<c2s_MOVE>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<c2s_MOVE> Createc2s_MOVE(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const Nagox::Struct::Vec3 *pos = nullptr,
    const Nagox::Struct::Vec3 *vel = nullptr,
    const Nagox::Struct::Vec3 *accel = nullptr,
    float body_angle = 0.0f,
    uint64_t time_stamp = 0) {
  c2s_MOVEBuilder builder_(_fbb);
  builder_.add_time_stamp(time_stamp);
  builder_.add_body_angle(body_angle);
  builder_.add_accel(accel);
  builder_.add_vel(vel);
  builder_.add_pos(pos);
  return builder_.Finish();
}

struct s2c_MOVE FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef s2c_MOVEBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJ_ID = 4,
    VT_POS = 6,
    VT_VEL = 8,
    VT_ACCEL = 10,
    VT_BODY_ANGLE = 12,
    VT_TIME_STAMP = 14
  };
  uint64_t obj_id() const {
    return GetField<uint64_t>(VT_OBJ_ID, 0);
  }
  bool mutate_obj_id(uint64_t _obj_id = 0) {
    return SetField<uint64_t>(VT_OBJ_ID, _obj_id, 0);
  }
  const Nagox::Struct::Vec3 *pos() const {
    return GetStruct<const Nagox::Struct::Vec3 *>(VT_POS);
  }
  Nagox::Struct::Vec3 *mutable_pos() {
    return GetStruct<Nagox::Struct::Vec3 *>(VT_POS);
  }
  const Nagox::Struct::Vec3 *vel() const {
    return GetStruct<const Nagox::Struct::Vec3 *>(VT_VEL);
  }
  Nagox::Struct::Vec3 *mutable_vel() {
    return GetStruct<Nagox::Struct::Vec3 *>(VT_VEL);
  }
  const Nagox::Struct::Vec3 *accel() const {
    return GetStruct<const Nagox::Struct::Vec3 *>(VT_ACCEL);
  }
  Nagox::Struct::Vec3 *mutable_accel() {
    return GetStruct<Nagox::Struct::Vec3 *>(VT_ACCEL);
  }
  float body_angle() const {
    return GetField<float>(VT_BODY_ANGLE, 0.0f);
  }
  bool mutate_body_angle(float _body_angle = 0.0f) {
    return SetField<float>(VT_BODY_ANGLE, _body_angle, 0.0f);
  }
  uint64_t time_stamp() const {
    return GetField<uint64_t>(VT_TIME_STAMP, 0);
  }
  bool mutate_time_stamp(uint64_t _time_stamp = 0) {
    return SetField<uint64_t>(VT_TIME_STAMP, _time_stamp, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_OBJ_ID, 8) &&
           VerifyField<Nagox::Struct::Vec3>(verifier, VT_POS, 4) &&
           VerifyField<Nagox::Struct::Vec3>(verifier, VT_VEL, 4) &&
           VerifyField<Nagox::Struct::Vec3>(verifier, VT_ACCEL, 4) &&
           VerifyField<float>(verifier, VT_BODY_ANGLE, 4) &&
           VerifyField<uint64_t>(verifier, VT_TIME_STAMP, 8) &&
           verifier.EndTable();
  }
};

struct s2c_MOVEBuilder {
  typedef s2c_MOVE Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_obj_id(uint64_t obj_id) {
    fbb_.AddElement<uint64_t>(s2c_MOVE::VT_OBJ_ID, obj_id, 0);
  }
  void add_pos(const Nagox::Struct::Vec3 *pos) {
    fbb_.AddStruct(s2c_MOVE::VT_POS, pos);
  }
  void add_vel(const Nagox::Struct::Vec3 *vel) {
    fbb_.AddStruct(s2c_MOVE::VT_VEL, vel);
  }
  void add_accel(const Nagox::Struct::Vec3 *accel) {
    fbb_.AddStruct(s2c_MOVE::VT_ACCEL, accel);
  }
  void add_body_angle(float body_angle) {
    fbb_.AddElement<float>(s2c_MOVE::VT_BODY_ANGLE, body_angle, 0.0f);
  }
  void add_time_stamp(uint64_t time_stamp) {
    fbb_.AddElement<uint64_t>(s2c_MOVE::VT_TIME_STAMP, time_stamp, 0);
  }
  explicit s2c_MOVEBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<s2c_MOVE> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<s2c_MOVE>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<s2c_MOVE> Creates2c_MOVE(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t obj_id = 0,
    const Nagox::Struct::Vec3 *pos = nullptr,
    const Nagox::Struct::Vec3 *vel = nullptr,
    const Nagox::Struct::Vec3 *accel = nullptr,
    float body_angle = 0.0f,
    uint64_t time_stamp = 0) {
  s2c_MOVEBuilder builder_(_fbb);
  builder_.add_time_stamp(time_stamp);
  builder_.add_obj_id(obj_id);
  builder_.add_body_angle(body_angle);
  builder_.add_accel(accel);
  builder_.add_vel(vel);
  builder_.add_pos(pos);
  return builder_.Finish();
}

struct s2c_MONSTER_ATTACK FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef s2c_MONSTER_ATTACKBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJ_ID = 4,
    VT_PLAYER_ID = 6,
    VT_DMG = 8
  };
  uint64_t obj_id() const {
    return GetField<uint64_t>(VT_OBJ_ID, 0);
  }
  bool mutate_obj_id(uint64_t _obj_id = 0) {
    return SetField<uint64_t>(VT_OBJ_ID, _obj_id, 0);
  }
  uint64_t player_id() const {
    return GetField<uint64_t>(VT_PLAYER_ID, 0);
  }
  bool mutate_player_id(uint64_t _player_id = 0) {
    return SetField<uint64_t>(VT_PLAYER_ID, _player_id, 0);
  }
  uint32_t dmg() const {
    return GetField<uint32_t>(VT_DMG, 0);
  }
  bool mutate_dmg(uint32_t _dmg = 0) {
    return SetField<uint32_t>(VT_DMG, _dmg, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_OBJ_ID, 8) &&
           VerifyField<uint64_t>(verifier, VT_PLAYER_ID, 8) &&
           VerifyField<uint32_t>(verifier, VT_DMG, 4) &&
           verifier.EndTable();
  }
};

struct s2c_MONSTER_ATTACKBuilder {
  typedef s2c_MONSTER_ATTACK Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_obj_id(uint64_t obj_id) {
    fbb_.AddElement<uint64_t>(s2c_MONSTER_ATTACK::VT_OBJ_ID, obj_id, 0);
  }
  void add_player_id(uint64_t player_id) {
    fbb_.AddElement<uint64_t>(s2c_MONSTER_ATTACK::VT_PLAYER_ID, player_id, 0);
  }
  void add_dmg(uint32_t dmg) {
    fbb_.AddElement<uint32_t>(s2c_MONSTER_ATTACK::VT_DMG, dmg, 0);
  }
  explicit s2c_MONSTER_ATTACKBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<s2c_MONSTER_ATTACK> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<s2c_MONSTER_ATTACK>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<s2c_MONSTER_ATTACK> Creates2c_MONSTER_ATTACK(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t obj_id = 0,
    uint64_t player_id = 0,
    uint32_t dmg = 0) {
  s2c_MONSTER_ATTACKBuilder builder_(_fbb);
  builder_.add_player_id(player_id);
  builder_.add_obj_id(obj_id);
  builder_.add_dmg(dmg);
  return builder_.Finish();
}

struct s2c_MONSTER_AGGRO_START FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef s2c_MONSTER_AGGRO_STARTBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GROUP_TYPE = 4,
    VT_OBJ_TYPE_INFO = 6
  };
  Nagox::Enum::GROUP_TYPE group_type() const {
    return static_cast<Nagox::Enum::GROUP_TYPE>(GetField<uint8_t>(VT_GROUP_TYPE, 0));
  }
  bool mutate_group_type(Nagox::Enum::GROUP_TYPE _group_type = static_cast<Nagox::Enum::GROUP_TYPE>(0)) {
    return SetField<uint8_t>(VT_GROUP_TYPE, static_cast<uint8_t>(_group_type), 0);
  }
  uint8_t obj_type_info() const {
    return GetField<uint8_t>(VT_OBJ_TYPE_INFO, 0);
  }
  bool mutate_obj_type_info(uint8_t _obj_type_info = 0) {
    return SetField<uint8_t>(VT_OBJ_TYPE_INFO, _obj_type_info, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_GROUP_TYPE, 1) &&
           VerifyField<uint8_t>(verifier, VT_OBJ_TYPE_INFO, 1) &&
           verifier.EndTable();
  }
};

struct s2c_MONSTER_AGGRO_STARTBuilder {
  typedef s2c_MONSTER_AGGRO_START Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_group_type(Nagox::Enum::GROUP_TYPE group_type) {
    fbb_.AddElement<uint8_t>(s2c_MONSTER_AGGRO_START::VT_GROUP_TYPE, static_cast<uint8_t>(group_type), 0);
  }
  void add_obj_type_info(uint8_t obj_type_info) {
    fbb_.AddElement<uint8_t>(s2c_MONSTER_AGGRO_START::VT_OBJ_TYPE_INFO, obj_type_info, 0);
  }
  explicit s2c_MONSTER_AGGRO_STARTBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<s2c_MONSTER_AGGRO_START> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<s2c_MONSTER_AGGRO_START>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<s2c_MONSTER_AGGRO_START> Creates2c_MONSTER_AGGRO_START(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Nagox::Enum::GROUP_TYPE group_type = Nagox::Enum::GROUP_TYPE_PLAYER,
    uint8_t obj_type_info = 0) {
  s2c_MONSTER_AGGRO_STARTBuilder builder_(_fbb);
  builder_.add_obj_type_info(obj_type_info);
  builder_.add_group_type(group_type);
  return builder_.Finish();
}

struct s2c_MONSTER_AGGRO_END FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef s2c_MONSTER_AGGRO_ENDBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GROUP_TYPE = 4,
    VT_OBJ_TYPE_INFO = 6
  };
  Nagox::Enum::GROUP_TYPE group_type() const {
    return static_cast<Nagox::Enum::GROUP_TYPE>(GetField<uint8_t>(VT_GROUP_TYPE, 0));
  }
  bool mutate_group_type(Nagox::Enum::GROUP_TYPE _group_type = static_cast<Nagox::Enum::GROUP_TYPE>(0)) {
    return SetField<uint8_t>(VT_GROUP_TYPE, static_cast<uint8_t>(_group_type), 0);
  }
  uint8_t obj_type_info() const {
    return GetField<uint8_t>(VT_OBJ_TYPE_INFO, 0);
  }
  bool mutate_obj_type_info(uint8_t _obj_type_info = 0) {
    return SetField<uint8_t>(VT_OBJ_TYPE_INFO, _obj_type_info, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_GROUP_TYPE, 1) &&
           VerifyField<uint8_t>(verifier, VT_OBJ_TYPE_INFO, 1) &&
           verifier.EndTable();
  }
};

struct s2c_MONSTER_AGGRO_ENDBuilder {
  typedef s2c_MONSTER_AGGRO_END Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_group_type(Nagox::Enum::GROUP_TYPE group_type) {
    fbb_.AddElement<uint8_t>(s2c_MONSTER_AGGRO_END::VT_GROUP_TYPE, static_cast<uint8_t>(group_type), 0);
  }
  void add_obj_type_info(uint8_t obj_type_info) {
    fbb_.AddElement<uint8_t>(s2c_MONSTER_AGGRO_END::VT_OBJ_TYPE_INFO, obj_type_info, 0);
  }
  explicit s2c_MONSTER_AGGRO_ENDBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<s2c_MONSTER_AGGRO_END> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<s2c_MONSTER_AGGRO_END>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<s2c_MONSTER_AGGRO_END> Creates2c_MONSTER_AGGRO_END(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Nagox::Enum::GROUP_TYPE group_type = Nagox::Enum::GROUP_TYPE_PLAYER,
    uint8_t obj_type_info = 0) {
  s2c_MONSTER_AGGRO_ENDBuilder builder_(_fbb);
  builder_.add_obj_type_info(obj_type_info);
  builder_.add_group_type(group_type);
  return builder_.Finish();
}

struct c2s_PLAYER_ATTACK FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef c2s_PLAYER_ATTACKBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BODY_ANGLE = 4,
    VT_ATK_POS = 6
  };
  float body_angle() const {
    return GetField<float>(VT_BODY_ANGLE, 0.0f);
  }
  bool mutate_body_angle(float _body_angle = 0.0f) {
    return SetField<float>(VT_BODY_ANGLE, _body_angle, 0.0f);
  }
  const Nagox::Struct::Vec3 *atk_pos() const {
    return GetStruct<const Nagox::Struct::Vec3 *>(VT_ATK_POS);
  }
  Nagox::Struct::Vec3 *mutable_atk_pos() {
    return GetStruct<Nagox::Struct::Vec3 *>(VT_ATK_POS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_BODY_ANGLE, 4) &&
           VerifyField<Nagox::Struct::Vec3>(verifier, VT_ATK_POS, 4) &&
           verifier.EndTable();
  }
};

struct c2s_PLAYER_ATTACKBuilder {
  typedef c2s_PLAYER_ATTACK Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_body_angle(float body_angle) {
    fbb_.AddElement<float>(c2s_PLAYER_ATTACK::VT_BODY_ANGLE, body_angle, 0.0f);
  }
  void add_atk_pos(const Nagox::Struct::Vec3 *atk_pos) {
    fbb_.AddStruct(c2s_PLAYER_ATTACK::VT_ATK_POS, atk_pos);
  }
  explicit c2s_PLAYER_ATTACKBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<c2s_PLAYER_ATTACK> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<c2s_PLAYER_ATTACK>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<c2s_PLAYER_ATTACK> Createc2s_PLAYER_ATTACK(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float body_angle = 0.0f,
    const Nagox::Struct::Vec3 *atk_pos = nullptr) {
  c2s_PLAYER_ATTACKBuilder builder_(_fbb);
  builder_.add_atk_pos(atk_pos);
  builder_.add_body_angle(body_angle);
  return builder_.Finish();
}

struct s2c_PLAYER_ATTACK FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef s2c_PLAYER_ATTACKBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ATK_PLAYER_ID = 4,
    VT_BODY_ANGLE = 6,
    VT_ATK_POS = 8
  };
  uint64_t atk_player_id() const {
    return GetField<uint64_t>(VT_ATK_PLAYER_ID, 0);
  }
  bool mutate_atk_player_id(uint64_t _atk_player_id = 0) {
    return SetField<uint64_t>(VT_ATK_PLAYER_ID, _atk_player_id, 0);
  }
  float body_angle() const {
    return GetField<float>(VT_BODY_ANGLE, 0.0f);
  }
  bool mutate_body_angle(float _body_angle = 0.0f) {
    return SetField<float>(VT_BODY_ANGLE, _body_angle, 0.0f);
  }
  const Nagox::Struct::Vec3 *atk_pos() const {
    return GetStruct<const Nagox::Struct::Vec3 *>(VT_ATK_POS);
  }
  Nagox::Struct::Vec3 *mutable_atk_pos() {
    return GetStruct<Nagox::Struct::Vec3 *>(VT_ATK_POS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ATK_PLAYER_ID, 8) &&
           VerifyField<float>(verifier, VT_BODY_ANGLE, 4) &&
           VerifyField<Nagox::Struct::Vec3>(verifier, VT_ATK_POS, 4) &&
           verifier.EndTable();
  }
};

struct s2c_PLAYER_ATTACKBuilder {
  typedef s2c_PLAYER_ATTACK Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_atk_player_id(uint64_t atk_player_id) {
    fbb_.AddElement<uint64_t>(s2c_PLAYER_ATTACK::VT_ATK_PLAYER_ID, atk_player_id, 0);
  }
  void add_body_angle(float body_angle) {
    fbb_.AddElement<float>(s2c_PLAYER_ATTACK::VT_BODY_ANGLE, body_angle, 0.0f);
  }
  void add_atk_pos(const Nagox::Struct::Vec3 *atk_pos) {
    fbb_.AddStruct(s2c_PLAYER_ATTACK::VT_ATK_POS, atk_pos);
  }
  explicit s2c_PLAYER_ATTACKBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<s2c_PLAYER_ATTACK> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<s2c_PLAYER_ATTACK>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<s2c_PLAYER_ATTACK> Creates2c_PLAYER_ATTACK(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t atk_player_id = 0,
    float body_angle = 0.0f,
    const Nagox::Struct::Vec3 *atk_pos = nullptr) {
  s2c_PLAYER_ATTACKBuilder builder_(_fbb);
  builder_.add_atk_player_id(atk_player_id);
  builder_.add_atk_pos(atk_pos);
  builder_.add_body_angle(body_angle);
  return builder_.Finish();
}

struct s2c_PLAYER_DEATH FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef s2c_PLAYER_DEATHBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_ID = 4,
    VT_REBIRTH_POS = 6
  };
  uint64_t player_id() const {
    return GetField<uint64_t>(VT_PLAYER_ID, 0);
  }
  bool mutate_player_id(uint64_t _player_id = 0) {
    return SetField<uint64_t>(VT_PLAYER_ID, _player_id, 0);
  }
  const Nagox::Struct::Vec3 *rebirth_pos() const {
    return GetStruct<const Nagox::Struct::Vec3 *>(VT_REBIRTH_POS);
  }
  Nagox::Struct::Vec3 *mutable_rebirth_pos() {
    return GetStruct<Nagox::Struct::Vec3 *>(VT_REBIRTH_POS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_PLAYER_ID, 8) &&
           VerifyField<Nagox::Struct::Vec3>(verifier, VT_REBIRTH_POS, 4) &&
           verifier.EndTable();
  }
};

struct s2c_PLAYER_DEATHBuilder {
  typedef s2c_PLAYER_DEATH Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_id(uint64_t player_id) {
    fbb_.AddElement<uint64_t>(s2c_PLAYER_DEATH::VT_PLAYER_ID, player_id, 0);
  }
  void add_rebirth_pos(const Nagox::Struct::Vec3 *rebirth_pos) {
    fbb_.AddStruct(s2c_PLAYER_DEATH::VT_REBIRTH_POS, rebirth_pos);
  }
  explicit s2c_PLAYER_DEATHBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<s2c_PLAYER_DEATH> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<s2c_PLAYER_DEATH>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<s2c_PLAYER_DEATH> Creates2c_PLAYER_DEATH(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t player_id = 0,
    const Nagox::Struct::Vec3 *rebirth_pos = nullptr) {
  s2c_PLAYER_DEATHBuilder builder_(_fbb);
  builder_.add_player_id(player_id);
  builder_.add_rebirth_pos(rebirth_pos);
  return builder_.Finish();
}

struct c2s_PLAYER_DEATH FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef c2s_PLAYER_DEATHBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct c2s_PLAYER_DEATHBuilder {
  typedef c2s_PLAYER_DEATH Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit c2s_PLAYER_DEATHBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<c2s_PLAYER_DEATH> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<c2s_PLAYER_DEATH>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<c2s_PLAYER_DEATH> Createc2s_PLAYER_DEATH(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  c2s_PLAYER_DEATHBuilder builder_(_fbb);
  return builder_.Finish();
}

struct c2s_REQUEST_QUEST FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef c2s_REQUEST_QUESTBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_QUEST_ID = 4
  };
  uint64_t quest_id() const {
    return GetField<uint64_t>(VT_QUEST_ID, 0);
  }
  bool mutate_quest_id(uint64_t _quest_id = 0) {
    return SetField<uint64_t>(VT_QUEST_ID, _quest_id, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_QUEST_ID, 8) &&
           verifier.EndTable();
  }
};

struct c2s_REQUEST_QUESTBuilder {
  typedef c2s_REQUEST_QUEST Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_quest_id(uint64_t quest_id) {
    fbb_.AddElement<uint64_t>(c2s_REQUEST_QUEST::VT_QUEST_ID, quest_id, 0);
  }
  explicit c2s_REQUEST_QUESTBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<c2s_REQUEST_QUEST> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<c2s_REQUEST_QUEST>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<c2s_REQUEST_QUEST> Createc2s_REQUEST_QUEST(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t quest_id = 0) {
  c2s_REQUEST_QUESTBuilder builder_(_fbb);
  builder_.add_quest_id(quest_id);
  return builder_.Finish();
}

struct s2c_REQUEST_QUEST FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef s2c_REQUEST_QUESTBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_QUEST_ID = 4
  };
  uint64_t quest_id() const {
    return GetField<uint64_t>(VT_QUEST_ID, 0);
  }
  bool mutate_quest_id(uint64_t _quest_id = 0) {
    return SetField<uint64_t>(VT_QUEST_ID, _quest_id, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_QUEST_ID, 8) &&
           verifier.EndTable();
  }
};

struct s2c_REQUEST_QUESTBuilder {
  typedef s2c_REQUEST_QUEST Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_quest_id(uint64_t quest_id) {
    fbb_.AddElement<uint64_t>(s2c_REQUEST_QUEST::VT_QUEST_ID, quest_id, 0);
  }
  explicit s2c_REQUEST_QUESTBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<s2c_REQUEST_QUEST> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<s2c_REQUEST_QUEST>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<s2c_REQUEST_QUEST> Creates2c_REQUEST_QUEST(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t quest_id = 0) {
  s2c_REQUEST_QUESTBuilder builder_(_fbb);
  builder_.add_quest_id(quest_id);
  return builder_.Finish();
}

struct s2c_CLEAR_QUEST FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef s2c_CLEAR_QUESTBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_QUEST_ID = 4,
    VT_IS_CLEAR = 6
  };
  uint64_t quest_id() const {
    return GetField<uint64_t>(VT_QUEST_ID, 0);
  }
  bool mutate_quest_id(uint64_t _quest_id = 0) {
    return SetField<uint64_t>(VT_QUEST_ID, _quest_id, 0);
  }
  uint8_t is_clear() const {
    return GetField<uint8_t>(VT_IS_CLEAR, 0);
  }
  bool mutate_is_clear(uint8_t _is_clear = 0) {
    return SetField<uint8_t>(VT_IS_CLEAR, _is_clear, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_QUEST_ID, 8) &&
           VerifyField<uint8_t>(verifier, VT_IS_CLEAR, 1) &&
           verifier.EndTable();
  }
};

struct s2c_CLEAR_QUESTBuilder {
  typedef s2c_CLEAR_QUEST Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_quest_id(uint64_t quest_id) {
    fbb_.AddElement<uint64_t>(s2c_CLEAR_QUEST::VT_QUEST_ID, quest_id, 0);
  }
  void add_is_clear(uint8_t is_clear) {
    fbb_.AddElement<uint8_t>(s2c_CLEAR_QUEST::VT_IS_CLEAR, is_clear, 0);
  }
  explicit s2c_CLEAR_QUESTBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<s2c_CLEAR_QUEST> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<s2c_CLEAR_QUEST>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<s2c_CLEAR_QUEST> Creates2c_CLEAR_QUEST(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t quest_id = 0,
    uint8_t is_clear = 0) {
  s2c_CLEAR_QUESTBuilder builder_(_fbb);
  builder_.add_quest_id(quest_id);
  builder_.add_is_clear(is_clear);
  return builder_.Finish();
}

struct c2s_FIRE_PROJ FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef c2s_FIRE_PROJBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POS = 4,
    VT_BODY_ANGLE = 6
  };
  const Nagox::Struct::Vec3 *pos() const {
    return GetStruct<const Nagox::Struct::Vec3 *>(VT_POS);
  }
  Nagox::Struct::Vec3 *mutable_pos() {
    return GetStruct<Nagox::Struct::Vec3 *>(VT_POS);
  }
  float body_angle() const {
    return GetField<float>(VT_BODY_ANGLE, 0.0f);
  }
  bool mutate_body_angle(float _body_angle = 0.0f) {
    return SetField<float>(VT_BODY_ANGLE, _body_angle, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Nagox::Struct::Vec3>(verifier, VT_POS, 4) &&
           VerifyField<float>(verifier, VT_BODY_ANGLE, 4) &&
           verifier.EndTable();
  }
};

struct c2s_FIRE_PROJBuilder {
  typedef c2s_FIRE_PROJ Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pos(const Nagox::Struct::Vec3 *pos) {
    fbb_.AddStruct(c2s_FIRE_PROJ::VT_POS, pos);
  }
  void add_body_angle(float body_angle) {
    fbb_.AddElement<float>(c2s_FIRE_PROJ::VT_BODY_ANGLE, body_angle, 0.0f);
  }
  explicit c2s_FIRE_PROJBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<c2s_FIRE_PROJ> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<c2s_FIRE_PROJ>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<c2s_FIRE_PROJ> Createc2s_FIRE_PROJ(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const Nagox::Struct::Vec3 *pos = nullptr,
    float body_angle = 0.0f) {
  c2s_FIRE_PROJBuilder builder_(_fbb);
  builder_.add_body_angle(body_angle);
  builder_.add_pos(pos);
  return builder_.Finish();
}

struct s2c_FIRE_PROJ FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef s2c_FIRE_PROJBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PROJ_ID = 4,
    VT_POS = 6,
    VT_VEL = 8
  };
  uint64_t proj_id() const {
    return GetField<uint64_t>(VT_PROJ_ID, 0);
  }
  bool mutate_proj_id(uint64_t _proj_id = 0) {
    return SetField<uint64_t>(VT_PROJ_ID, _proj_id, 0);
  }
  const Nagox::Struct::Vec3 *pos() const {
    return GetStruct<const Nagox::Struct::Vec3 *>(VT_POS);
  }
  Nagox::Struct::Vec3 *mutable_pos() {
    return GetStruct<Nagox::Struct::Vec3 *>(VT_POS);
  }
  const Nagox::Struct::Vec3 *vel() const {
    return GetStruct<const Nagox::Struct::Vec3 *>(VT_VEL);
  }
  Nagox::Struct::Vec3 *mutable_vel() {
    return GetStruct<Nagox::Struct::Vec3 *>(VT_VEL);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_PROJ_ID, 8) &&
           VerifyField<Nagox::Struct::Vec3>(verifier, VT_POS, 4) &&
           VerifyField<Nagox::Struct::Vec3>(verifier, VT_VEL, 4) &&
           verifier.EndTable();
  }
};

struct s2c_FIRE_PROJBuilder {
  typedef s2c_FIRE_PROJ Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_proj_id(uint64_t proj_id) {
    fbb_.AddElement<uint64_t>(s2c_FIRE_PROJ::VT_PROJ_ID, proj_id, 0);
  }
  void add_pos(const Nagox::Struct::Vec3 *pos) {
    fbb_.AddStruct(s2c_FIRE_PROJ::VT_POS, pos);
  }
  void add_vel(const Nagox::Struct::Vec3 *vel) {
    fbb_.AddStruct(s2c_FIRE_PROJ::VT_VEL, vel);
  }
  explicit s2c_FIRE_PROJBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<s2c_FIRE_PROJ> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<s2c_FIRE_PROJ>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<s2c_FIRE_PROJ> Creates2c_FIRE_PROJ(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t proj_id = 0,
    const Nagox::Struct::Vec3 *pos = nullptr,
    const Nagox::Struct::Vec3 *vel = nullptr) {
  s2c_FIRE_PROJBuilder builder_(_fbb);
  builder_.add_proj_id(proj_id);
  builder_.add_vel(vel);
  builder_.add_pos(pos);
  return builder_.Finish();
}

}  // namespace Protocol
}  // namespace Nagox

#endif  // FLATBUFFERS_GENERATED_PROTOCOL_NAGOX_PROTOCOL_H_
