#include "pch.h"
#include <flatbuffers/flatbuffers.h>
{% if namespace_prefix == 'NagiocpX::' %}
#include "../NagiocpX/NagiocpXPch.h"
{% else %}
#include "../ClientNetwork/ClientNetHelper.h"
{% endif %}
#include "enum_generated.h"
#include "struct_generated.h"
#include "protocol_generated.h"
{% if namespace_prefix == 'NetHelper::' %}
#include "s2c_PacketHandler.h"
{% elif create_packet_type == 'c2s' %}
#include "s2c_DummyPacketHandler.h"
{% else %}
#include "c2s_PacketHandler.h"
{% endif %}

static {{ namespace_prefix }}S_ptr<{{ namespace_prefix }}SendBuffer> CreateSendBuffer(flatbuffers::FlatBufferBuilder& builder, const CREATE_PKT_ID pktId) noexcept
{
    const uint16_t dataSize = builder.GetSize();
    const uint16_t packetSize = dataSize + static_cast<c_uint16>(sizeof({{ namespace_prefix }}PacketHeader));
    {{ namespace_prefix }}S_ptr<{{ namespace_prefix }}SendBuffer> sendBuffer = {{ namespace_prefix }}SendBufferMgr::Open(packetSize);
    {{ namespace_prefix }}PacketHeader* const __restrict header =
        reinterpret_cast<{{ namespace_prefix }}PacketHeader* const>(
            ::memcpy(sendBuffer->Buffer() + sizeof({{ namespace_prefix }}PacketHeader), builder.GetBufferPointer(), dataSize)
            ) - 1;
    header->pkt_size = packetSize;
    header->pkt_id = static_cast<c_uint16>(pktId);
    sendBuffer->Close(packetSize);
    return sendBuffer;
}

{% for table in tables %}
{{ namespace_prefix }}S_ptr<{{ namespace_prefix }}SendBuffer> Create_{{ table.name }}(
    {% if table.fields|length > 0 %}
    {% for field in table.fields %}
    {% if "::" in field.type %}
    const {{ field.type }}& {{ field.name }},
    {% else %}
    const {{ field.type }} {{ field.name }},
    {% endif %}
    {% endfor %}
    flatbuffers::FlatBufferBuilder* const builder_ptr
    {% else %}
    flatbuffers::FlatBufferBuilder* const builder_ptr
    {% endif %}
)noexcept {
    auto& builder = *builder_ptr;
    builder.Clear();
    {% for field in table.fields %}
    {% if field.type == "std::string_view" %}
    const auto {{ field.name }}_offset = builder.CreateString({{ field.name }});
    {% elif "std::vector" in field.type %}
    {% if "::Struct::" in field.type %}
    const auto {{ field.name }}_offset = builder.CreateVectorOfStructs({{ field.name }});
    {% else %}
    const auto {{ field.name }}_offset = builder.CreateVector({{ field.name }});
    {% endif %}
    {% elif "::Struct" in field.type %}
    const auto {{ field.name }}_offset = &{{ field.name }};
    {% else %}
    const auto {{ field.name }}_value = {{ field.name }};
    {% endif %}
    {% endfor %}
    const auto serialized{{ table.name }} = Nagox::Protocol::Create{{ table.name }}(
        builder
        {% if table.fields|length > 0 %},{% endif %}
        {% for field in table.fields %}
        {% if field.type == "std::string_view" %}
        {{ field.name }}_offset{% elif "std::vector" in field.type %}
        {{ field.name }}_offset{% elif "::Struct" in field.type %}
        {{ field.name }}_offset{% else %}
        {{ field.name }}_value{% endif %}{% if not loop.last %},
        {% endif %}
        {% endfor %}
    );
    builder.Finish(serialized{{ table.name }});

    return CreateSendBuffer(builder, CREATE_PKT_ID::{{ table.name }});
}
{% endfor %}