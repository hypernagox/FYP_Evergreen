// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ENUM_NAGOX_ENUM_H_
#define FLATBUFFERS_GENERATED_ENUM_NAGOX_ENUM_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 24,
             "Non-compatible flatbuffers version included");

namespace Nagox {
namespace Enum {

enum GROUP_TYPE : uint8_t {
  GROUP_TYPE_PLAYER = 0,
  GROUP_TYPE_MONSTER = 1,
  GROUP_TYPE_NPC = 2,
  GROUP_TYPE_MIN = GROUP_TYPE_PLAYER,
  GROUP_TYPE_MAX = GROUP_TYPE_NPC
};

inline const GROUP_TYPE (&EnumValuesGROUP_TYPE())[3] {
  static const GROUP_TYPE values[] = {
    GROUP_TYPE_PLAYER,
    GROUP_TYPE_MONSTER,
    GROUP_TYPE_NPC
  };
  return values;
}

inline const char * const *EnumNamesGROUP_TYPE() {
  static const char * const names[4] = {
    "PLAYER",
    "MONSTER",
    "NPC",
    nullptr
  };
  return names;
}

inline const char *EnumNameGROUP_TYPE(GROUP_TYPE e) {
  if (::flatbuffers::IsOutRange(e, GROUP_TYPE_PLAYER, GROUP_TYPE_NPC)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesGROUP_TYPE()[index];
}

}  // namespace Enum
}  // namespace Nagox

#endif  // FLATBUFFERS_GENERATED_ENUM_NAGOX_ENUM_H_
